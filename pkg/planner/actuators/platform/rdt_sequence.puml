@startuml
'https://plantuml.com/sequence-diagram
header
    RDT actuator.
endheader

skinparam monochrome true

actor Planner
activate Planner
participant "RDT actuator" as rdt
activate rdt
participant "Prediction script" as pred
participant "Analytics script" as analytics
database "knowledge base" as kb
activate kb
database "TS DB" as tsdb
activate tsdb
box "node level"
    participant "RDT agent" as rdt_agent
    activate rdt_agent
end box

== NextState() ==

Planner -> rdt: NextState(state)
rdt -> rdt: create follow-up states.
loop for all options
    note over rdt: options is a list of potential\nRDT/DRC|CAT configs\n(incl their mask settings etc.)
    rdt -> pred: run
    activate pred
    pred -> kb: get model
    kb --> pred
    pred --> rdt: predicted target value.
    deactivate pred
end loop
note over rdt: select potential follow-up state with\n"shortest" distance to desired state.
rdt --> Planner: [state], [utility], [action]

== Perform() ==

Planner -> rdt: Perform(state)
rdt -> rdt: annotate POD spec with selected option.
note over rdt: TODO: add hints for scheduler.\ne.g. node level LLC miss rate < value;\n# of cache_ways/CLOSes;\n...

loop "forever"
    rdt_agent -> rdt_agent: monitor PODs on node.
    alt config changed:
        rdt_agent -> rdt_agent: change resctrl / taskset / etc.\naccording to config option.
        note over rdt_agent: This will support DRC & e.g. RDT CAT.
    else
        rdt_agent -> rdt_agent: timeout.
    end alt
end loop

== Effect() ==

Planner -> rdt: Effect()
rdt -> analytics: run
activate analytics
analytics -> kb: get model
analytics -> tsdb: get data
kb --> analytics
tsdb --> analytics
analytics -> analytics: run analytics magic.
analytics --> kb: update model
deactivate analytics

@enduml